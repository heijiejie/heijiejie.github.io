<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>heijiejie的博客小站</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    <atom:link href="%5Bobject%20Object%5D" rel="hub"/>
    <description>heijiejie的博客小站</description>
    <pubDate>Mon, 09 Apr 2018 14:54:39 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Layaair 第一个“小游戏”</title>
      <link>http://yoursite.com/2018/04/09/Layaair-%E7%AC%AC%E4%B8%80%E4%B8%AA%E2%80%9C%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%9D/</link>
      <guid>http://yoursite.com/2018/04/09/Layaair-%E7%AC%AC%E4%B8%80%E4%B8%AA%E2%80%9C%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%9D/</guid>
      <pubDate>Mon, 09 Apr 2018 14:53:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Layabox新建文件&quot;&gt;&lt;a href=&quot;#Layabox新建文件&quot; class=&quot;headerlink&quot; title=&quot;Layabox新建文件&quot;&gt;&lt;/a&gt;Layabox新建文件&lt;/h2&gt;&lt;p&gt;步骤一：选中bin右键单击，然后左键点击“新建文件”，在bin目录下
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Layabox新建文件"><a href="#Layabox新建文件" class="headerlink" title="Layabox新建文件"></a>Layabox新建文件</h2><p>步骤一：选中bin右键单击，然后左键点击“新建文件”，在bin目录下建立一个HelloLaya.js的文件。</p><p><img src="http://upload-images.jianshu.io/upload_images/3497289-e4c4729d6e4f3b62.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>步骤二：按建步骤一的方式，还在bin目录下，创建一个HelloLaya.html的文件，点击打开该文件编写如下图的HTML代码。这里包括了引擎库与程序代码的引用。（Tips:如果项目代码里涉及中文，需要在HTML里设置好utf-8编码）</p><p><img src="http://upload-images.jianshu.io/upload_images/3497289-a81c09e0075867a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>HelloLayabox.html的文件添加如下图中代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>helloLayabox<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"libs/laya.core.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"HelloLayabox.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>步骤三：准备工作完成后，就可以编码了，我们打开bin目录下的HelloLayabox.js，开始编写如下代码：</p><p>点点文字，文字会往下移动：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Laya.init(<span class="number">600</span>,<span class="number">400</span>); <span class="comment">//初始化，创建一个舞台</span></span><br><span class="line">Laya.stage.bgColor=<span class="string">'#00aaff'</span>; <span class="comment">//修改背景色</span></span><br><span class="line"><span class="keyword">var</span> txt=<span class="keyword">new</span> Laya.Text(); <span class="comment">//创建文字对象</span></span><br><span class="line">txt.text=<span class="string">'带我飞！！'</span>; <span class="comment">//定义文字对象的内容</span></span><br><span class="line">txt.fontSize=<span class="number">35</span>; <span class="comment">//设定文本大小</span></span><br><span class="line">txt.color=<span class="string">'#ff1900'</span>; <span class="comment">//文本颜色</span></span><br><span class="line">txt.x=<span class="number">50</span>; <span class="comment">//文本X位置</span></span><br><span class="line">txt.y=<span class="number">100</span>; <span class="comment">//Y位置</span></span><br><span class="line">Laya.stage.addChild(txt); <span class="comment">//为舞台(stage)添加上你创建的这个小文本</span></span><br><span class="line">txt.on(<span class="string">'click'</span>,<span class="keyword">this</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">//点击事件，和JS的on事件一样，写在点它它会撒骄！</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span>(txt.y&gt;=<span class="number">300</span>)</span><br><span class="line">    &#123;</span><br><span class="line">         txt.text=<span class="string">'我跳！！'</span>;</span><br><span class="line">        txt.y = <span class="number">100</span>; <span class="comment">//坐标回到最初位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">         txt.text=<span class="string">'点我！！'</span>;</span><br><span class="line">        txt.y+=<span class="number">20</span>; <span class="comment">//坐标往下移</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>步骤四：编码完成后，按F5调试，在弹出的页面里，我们可以看到代码的运行结果，如下图所示<br><img src="https://upload-images.jianshu.io/upload_images/3497289-574f8a8f0d0c48ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/3497289-1fc8d4c1cd5a1fa2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/04/09/Layaair-%E7%AC%AC%E4%B8%80%E4%B8%AA%E2%80%9C%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%9D/#disqus_thread</comments>
    </item>
    
    <item>
      <title>LayaAir引擎初步认识(面向JS开发者)</title>
      <link>http://yoursite.com/2018/04/08/LayaAir%E5%BC%95%E6%93%8E%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86-%E9%9D%A2%E5%90%91JS%E5%BC%80%E5%8F%91%E8%80%85/</link>
      <guid>http://yoursite.com/2018/04/08/LayaAir%E5%BC%95%E6%93%8E%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86-%E9%9D%A2%E5%90%91JS%E5%BC%80%E5%8F%91%E8%80%85/</guid>
      <pubDate>Sun, 08 Apr 2018 09:39:16 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;LayaAir-源码结构分析&quot;&gt;&lt;a href=&quot;#LayaAir-源码结构分析&quot; class=&quot;headerlink&quot; title=&quot;LayaAir 源码结构分析&quot;&gt;&lt;/a&gt;LayaAir 源码结构分析&lt;/h3&gt;&lt;p&gt;Layabox 是搜游网络科技（北京）有限公
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="LayaAir-源码结构分析"><a href="#LayaAir-源码结构分析" class="headerlink" title="LayaAir 源码结构分析"></a>LayaAir 源码结构分析</h3><p>Layabox 是搜游网络科技（北京）有限公司打造的中国顶级游戏引擎提供商品牌，旗下第二代引擎 LayaAir 是全球首款基于 HTML5 协议的全能型开源引擎。</p><p>例程：输出HelloWord：<br>1.创建一个精灵（或者精灵的扩展类的实例）<br>2.给实例设置内容（Helloword）<br>3.设置实例的坐标等属性<br>4.把实例添加到舞台（stage）上。<br>选中类（Laya.Text）点F12查看类的实现<br>pivot是设置实例的轴心点</p><p>helloworld 源码：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">Laya.init(<span class="number">600</span>, <span class="number">400</span>,Laya.WebGL);<span class="comment">//初始化引擎 w h 是否使用webGL渲染</span></span><br><span class="line">Laya.stage.scaleMode = Laya.Stage.SCALE_SHOWALL;<span class="comment">//屏幕缩放模式</span></span><br><span class="line">Laya.stage.alignW = Laya.Stage.ALIGN_CENTER;<span class="comment">//水平对齐方式</span></span><br><span class="line">Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE;<span class="comment">//垂直对齐方式</span></span><br><span class="line">Laya.stage.screenMode = Laya.Stage.SCREEN_HORIZONTAL;<span class="comment">//屏幕适配</span></span><br><span class="line">var tx = new Laya.Text();<span class="comment">//实现hello world</span></span><br><span class="line">tx.text = <span class="string">"hello world"</span>;<span class="comment">//设置内容</span></span><br><span class="line">tx.pos(Laya.stage.width/<span class="number">2</span>,Laya.stage.height/<span class="number">2</span>);<span class="comment">//设置文本位置</span></span><br><span class="line">tx.color = <span class="string">"#ccc"</span>; <span class="comment">//文本颜色</span></span><br><span class="line">tx.fontSize = <span class="number">66</span>;    <span class="comment">//文本大小</span></span><br><span class="line">tx.pivot(tx.width/<span class="number">2</span>,tx.height/<span class="number">2</span>);  <span class="comment">//文本的轴心点</span></span><br><span class="line">Laya.stage.addChild(tx);  <span class="comment">//添加到屏幕</span></span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p> LayaAir引擎支持Canvas渲染模式与WebGL渲染模式，以下将分别对两种不同模式的参数进行逐一解释。</p><p>Canvas模式统计面板如下：<br>FPS(2D)<br>      面板中FPS表示游戏每秒帧率，（2D）表示是Canvas模式，满帧60，这个参数的数字越高，表明游戏性能越好，游戏的体验越流畅。</p><p>Sprite 精灵<br>舞台（屏幕）上能看到的所有的对象（精灵的扩展类的实例）的最顶层类<br>面板中Sprite表示渲染的节点数量，即每次渲染精灵的个数（包括容器），这个数会影响引擎遍历，组织数据和渲染，越少越好。</p><p>DrawCall<br>面板中DrawCall在Canvas模式表示每帧的绘制次数，包括图片、文字、矢量图，这个参数的数字也是越少越好。最多的时候建议不要超过100个。</p><p>Canvas<br>面板中Canvas表示缓存画布的数量，分别代表 （每帧重绘的画布数量 / 缓存类型为”normal”类型的画布数量 / 缓存类型为”bitmap”类型的画布数量”）。</p><p>WebGL模式统计面板如下：<br>FPS(3D)<br>面板中FPS表示游戏每秒帧率，（3D）表示是WebGL模式，满帧60，这个参数的数字越高，表明游戏性能越好，游戏的体验越流畅。</p><p>Sprite         面板中Sprite表示渲染的节点数量，即每次渲染精灵的个数（包括容器），这个数会影响引擎遍历，组织数据和渲染，越少越好。</p><p>DrawCall<br>面板中DrawCall在WebGL模式下表示渲染提交批次，每次准备数据并通知GPU渲染绘制的过程称为1次DrawCall，在每1次DrawCall中除了在通知GPU的渲染上比较耗时之外，切换材质与shader也是非常耗时的操作。 DrawCall的次数是决定性能的重要指标。    </p><p>Canvas<br>      面板中Canvas表示缓存画布的数量，分别代表 （每帧重绘的画布数量 / 缓存类型为”normal”类型的画布数量 / 缓存类型为”bitmap”类型的画布数量”）<br>CurMem        面板中CurMem表示当前使用的内存与显存总占用大小。</p><p>Shader<br>面板中Shader表示shader的提交次数。</p><p>无论是Canvas模式还是WebGL模式，我们都需要重点关注DrawCall，Sprite，Canvas这三个参数，然后针对性的进行优化。</p><p>针对Sprite的优化<br>      1）尽量减少不必要的层次嵌套，减少Sprite数量<br>      2）非可见区域的对象尽量从显示列表移除或者设置visible=false<br>      3）对于容器内有大量静态内容或者不经常变化的内容（比如按钮），可以对整个容器设置cacheAs属性，能大量减少Sprite的数量，显著提高性能。如果有动态内容，最好和静态内容分开，这样就可以只缓存静态内容。<br>      4）Panel内，会针对panel区域外的直接子对象（子对象的子对象判断不了）进行不渲染处理，超出panel区域的子对象是不产生消耗的。<br>针对DrawCall的优化<br>     1）对复杂静态内容设置cacheAs，能大量减少DrawCall。<br>     2）尽量保证同图集的图片渲染顺序是挨着的，如果不同图集交叉渲染，会增加DrawCall数量。<br>     3）尽量保证同一个面板中的所有资源用一个图集，这样能减少提交批次。</p><p>针对Canvas的优化<br>     在对Canvas优化时，我们需要注意，在以下场合不要使用cacheAs：<br>     1）对象非常简单，比如一个字或者一个图片，设置cacheAs=bitmap不但不提高性能，反而会损失性能。<br>     2）容器内有经常变化的内容，比如容器内有一个动画或者倒计时，如果再对这个容器设置cacheAs=bitmap，会损失性能。<br>     可以通过查看Canvas统计信息的第一个值，判断是否一直在刷新Canvas缓存；</p><p>针对cacheAs的相关介绍<br>     设置cacheAs可将显示对象缓存为静态图像，当cacheAs时，子对象发生变化，会自动重新缓存，同时也可以手动调用reCache方法更新缓存。 建议把不经常变化的复杂内容，缓存为静态图像，能极大提高渲染性能，cacheAs有”none”，”normal”和”bitmap”三个值可选。<br>      默认为”none”，不做任何缓存。<br>      当值为”normal”时，canvas下进行画布缓存，webgl模式下进行命令缓存。<br>      当值为”bitmap”时，canvas下进行依然是画布缓存，webGL模式下使用renderTarget缓存。这里需要注意的是，webGL下renderTarget缓存模式有2048大小限制，超出2048会额外增加内存开销。另外，不断重绘时开销也比较大，但是会减少drawcall，渲染性能最高。 webGL下命令缓存模式只会减少节点遍历及命令组织，不会减少drawcall，性能中等。<br>前面多次提到cacheAs，cacheAs是引擎优化性能的利器，一定要好好应用，他主要在两方面提高性能，一是能减少节点遍历和顶点及三角形计算，二是减少drawCall，合理利用cacheAs能大大提高游戏性能</p><p>其他通用优化策略<br>1、尽量减少对象重复创建，可以使用LayaAir引擎提供的对象池类（Pool类），复用已经创建的对象；</p><p>2、Handler尽量用Handler.create创建，通过此方法创建使用后会立即回收，或者自己手动调用recover()方法回收；</p><p>3、尽量减少滤镜，遮罩的使用，虽然LayaAir引擎对这些做了大量优化，但是还是不推荐大量使用；特别说明一下，在webGL模式下颜色滤镜消耗很小，可以使用。另外，场景中不重绘的对象使用滤镜，也可以达到几乎无损耗的程度。</p><p>4、减少粒子使用数量，在Canvas模式下，尽量不用粒子，否则性能会有损耗；</p><p>5、对象不显示的时候，尽量停掉内部的Timer，减少不必要的计算；</p><p>6、在Canvas模式下，尽量减少旋转，缩放，alpha等属性的使用，这些属性会对性能产生消耗。（在WebGL模式可以使用）；</p><p>7、减少文本描边的使用，适量使用位图字体代替；</p><p>8、设置Laya.stage.frameRate = “mouse”，在设置后，引擎默认会以30帧运行，只有鼠标活动后才会自动提速到60帧，这样既能保证鼠标操作的流畅性，又能减少不操作的性能消耗；</p><p>9、还可以设置Laya.stage.frameRate = “slow”，默认以30帧运行，来降低性能消耗，30帧的帧率已经能保证大多数游戏友好的体验；</p><p>10、删除对象时，确保外部没有对他进行引用，否则会造成内存泄漏，还可以手动调用destory方法销毁此对象；</p><p>11、不用的资源可以通过Loader.clearRes方法销毁；</p><p>12、如果多个属性都需要导致某个函数调用，可以使用callLater函数来延迟处理函数调用，减少函数计算开销，如果函数计算开销不大，建议不要使用；</p><p>13、同时加载大量图片会导致性能下降，尽量把加载分摊开；</p><p>14、设置cacheAs后，还可以设置staticCache=true，来阻止自动更新缓存，同时可以手动调用reCache方法更新缓存；</p><p>15、不要在timeloop里面创建对象及复杂计算；</p><p>16、尽量减少对容器的autoSize的使用，减少getBounds()的使用，因为这些调用会产生较多计算；</p><p>17、尽量少用try catch的使用，被try catch的函数执行会变得非常慢；</p><p>18、尽量缓存属性到局部变量，比如var len = arr.length;这样能减少属性查询及计算开销</p><p>19、使用Text类的changeText方法更改文本，可以减少排版消耗，对于不需要更改排版信息的内容更改，建议使用此方法修改内容；</p><p>20、多学习js代码书写优化策略，多测试对比性能，选择更好的方案；</p><p>使用Profiles分析游戏</p><pre><code>在chrome打开游戏后，按快捷键F12，就打开了chrome开发工具，切换到Profiles面板，可以分析游戏性能开销</code></pre><p>CPU占用分析</p><p><img src="http://upload-images.jianshu.io/upload_images/3497289-70634cb0798188d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><pre><code>按上图所示，点击start开始统计。</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/3497289-83d7f6e80ad4608b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><pre><code>这里可以看到哪些函数照成多少开销，然后有针对性的进行优化</code></pre><p>内存实例分析及内存泄漏分析</p><p><img src="http://upload-images.jianshu.io/upload_images/3497289-5cae5120a5770238.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><pre><code>点击Take Snapshot 开始统计内存快照，我们可以看到如同下图的详细对象实例信息</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/3497289-2b3da937a4214440.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><pre><code>再等一会，通过点击左上角圆点，统计一个新的内存快照。如下图所示，点击选中第二个快照，然后通过Comparison进行内存对比。</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/3497289-4e1a8f7fe71d6625.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这样就能分析出当前和上一次之间新创建的对象，如果有大量对象创建，是需要通过性能优化来解决的。</p><p>资源加载分析</p><pre><code>先点击Network打开面板，然后点击左上角的圆圈，变为红色后，刷新游戏，可以统计到游戏资源的加载信息。</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/3497289-4efb3297965ccf7a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><pre><code>根据此统计分析出资源加载的情况，然后针对性的去做一些优化。</code></pre><p>【最后】</p><p>除了本文的经验总结，其实最好的优化方法，就是多测试，多对比，不断总结经验，选择更好的实现方式，写出更优质的代码。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/04/08/LayaAir%E5%BC%95%E6%93%8E%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86-%E9%9D%A2%E5%90%91JS%E5%BC%80%E5%8F%91%E8%80%85/#disqus_thread</comments>
    </item>
    
    <item>
      <title>my first javascript</title>
      <link>http://yoursite.com/2018/04/07/my-first-javascript/</link>
      <guid>http://yoursite.com/2018/04/07/my-first-javascript/</guid>
      <pubDate>Sat, 07 Apr 2018 06:15:48 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;JS实时获取输入框中的值&quot;&gt;&lt;a href=&quot;#JS实时获取输入框中的值&quot; class=&quot;headerlink&quot; title=&quot;JS实时获取输入框中的值&quot;&gt;&lt;/a&gt;JS实时获取输入框中的值&lt;/h3&gt;&lt;p&gt; 实时获取input输入框中的值需要oninput和onpr
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="JS实时获取输入框中的值"><a href="#JS实时获取输入框中的值" class="headerlink" title="JS实时获取输入框中的值"></a>JS实时获取输入框中的值</h3><p> 实时获取input输入框中的值需要oninput和onpropertychange属性来实现。原因是onpropertychange属性为IE专属，而oninput属性支持大部分浏览器包括IE9及以上的版本。<br>       oninput与onpropertychange失效的情况：<br>　　oninput事件：</p><p>​ 1.在脚本中改变value时，不会触发；</p><p>​ 2.从浏览器的自动下拉提示中选取时，不会触发。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"userdata"</span>  name=<span class="string">"test"</span>&gt;</span><br><span class="line">    &lt;output type=<span class="string">"text"</span> id=<span class="string">"user"</span>  name=<span class="string">"test"</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var data = document.getElementById('userdata');</span><br><span class="line">    if('oninput' in data)&#123; </span><br><span class="line">            data.addEventListener(<span class="string">"input"</span>,getWord,<span class="literal">false</span>); </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            data.onpropertychange = getWord; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">function <span class="title">getWord</span><span class="params">()</span></span>&#123;</span><br><span class="line">        document.getElementById(<span class="string">"user"</span>).innerHTML = data.value;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3497289-7351ac497d35e325.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="JS获取输入字符串并将实现大小写字母切换"><a href="#JS获取输入字符串并将实现大小写字母切换" class="headerlink" title="JS获取输入字符串并将实现大小写字母切换"></a>JS获取输入字符串并将实现大小写字母切换</h3><p>js字母大小写转换方法：<br>1.toLocaleUpperCase()<br>2.toUpperCase()<br>3.toLocaleLowerCase()<br>4.toLowerCase()</p><p>下面就这四个实现大小写转换的js函数逐一做简单的分析。<br>1.toLocaleUpperCase()<br>将字符串中所有的字母字符都将被转换为大写的，同时适应宿主环境的当前区域设置。</p><p>​ 2.toUpperCase()<br>将字符串中的所有字母都被转化为大写字母。</p><p>​ 3.toLocaleLowerCase ()<br>将字符串所有的字母字符都被转换为小写，同时考虑到宿主环境的当前区域设置。</p><p>​ 4.toLowerCase()<br>将字符串中的字母被转换为小写字母</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>大小写字母转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>大小写字母转换.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"test-form"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"userdata"</span>  <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"myFunction()"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user"</span>  <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">()</span></span></span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> data = <span class="built_in">document</span>.getElementById(<span class="string">'userdata'</span>);</span></span><br><span class="line"><span class="actionscript">          alert(data.value.toUpperCase()); <span class="comment">//弹对话框显示输出值</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.getElementById(<span class="string">"user"</span>).innerHTML = data.value.toUpperCase();<span class="comment">//直接显示输出值</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3497289-8a852c5ea272dd36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="JS获取输入字符串并将实现拆分以及合并"><a href="#JS获取输入字符串并将实现拆分以及合并" class="headerlink" title="JS获取输入字符串并将实现拆分以及合并"></a>JS获取输入字符串并将实现拆分以及合并</h3><p>知识点:</p><p>​ 1.Data=Data.split(“”); //字符分割</p><p>​ 2.Data.join(“”); //字符合并</p><p>​ 3.charCodeAt方法是返回每一个字符的unicode编码</p><p>​ ‘a’.charCodeAt(0) &gt; 96 //小写</p><p>​ ‘A’.charCodeAt(0) &lt; 90 //大写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>大小字母写转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>大小写字母转换.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"test-form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"userdata"</span>  <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"myFunction()"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">output</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user"</span>  <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">()</span></span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> data = <span class="built_in">document</span>.getElementById(<span class="string">'userdata'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> Data=data.value;</span></span><br><span class="line"><span class="actionscript">  Data=Data.split(<span class="string">""</span>); <span class="comment">//字符分割 </span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;Data.length;i++)</span></span><br><span class="line"><span class="undefined">  &#123;</span></span><br><span class="line"><span class="actionscript">     <span class="comment">//循环遍历每一个字符串，</span></span></span><br><span class="line"><span class="actionscript">     <span class="comment">//if(/[a-z]/.test(Data.substring(i,i+1)))  </span></span></span><br><span class="line"><span class="actionscript">     <span class="comment">// 正则表达式 /[a-z]/    substring() 方法用于提取字符串中介于两个指定下标之间的字符</span></span></span><br><span class="line"><span class="actionscript">     <span class="comment">//charCodeAt方法是返回每一个字符的unicode编码，</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(Data[i].charCodeAt(<span class="number">0</span>) &gt;<span class="number">96</span>)</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="undefined">Data[i]=Data[i].toUpperCase();</span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="actionscript"><span class="keyword">else</span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="undefined">Data[i]=Data[i].toLowerCase();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">  &#125; </span></span><br><span class="line"><span class="actionscript">    <span class="comment">//alert(Data.join("")); //弹对话框显示输出值</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">"user"</span>).innerHTML = Data.join(<span class="string">""</span>);<span class="comment">//直接显示输出值</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3497289-4772272dc5ffdd65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/3497289-bdbfe9e107f15ea6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/04/07/my-first-javascript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>hexo常用命令</title>
      <link>http://yoursite.com/2018/04/07/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <guid>http://yoursite.com/2018/04/07/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <pubDate>Sat, 07 Apr 2018 04:34:55 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;hexo常用命令&quot;&gt;&lt;a href=&quot;#hexo常用命令&quot; class=&quot;headerlink&quot; title=&quot;hexo常用命令&quot;&gt;&lt;/a&gt;hexo常用命令&lt;/h3&gt;&lt;p&gt;Hexo 约有二十个命令，但普通用户经常使用的只有下列几个:&lt;/p&gt;
&lt;p&gt;hexo s是h
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><p>Hexo 约有二十个命令，但普通用户经常使用的只有下列几个:</p><p>hexo s是hexo server的缩写，命令效果一致；启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；对" target="_blank" rel="noopener">http://localhost:4000/预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；对</a> Hexo 根目录_config.yml的修改，需要重启本地服务器后才能预览效果。</p><p>hexo n是hexo new的缩写，命令效果一致。如hexo n “标题”，是新建一篇标题文章，因为标题里有空格，所以加上了引号。文章标题可以在对应 md 文件里改，新建时标题可以写的简单些；</p><p>文章可以拥有如下属性：</p><p>无标题.png</p><p>无标题.png</p><p>hexo d是hexo deploy的缩写，命令效果一致。动态博客中通过发布文章页面设置的各种属性，在hexo里要这样设置。使用hexo d命令可以自动生成网站静态文件，并部署到设定的仓库。</p><p>hexo clean命令是用于清除缓存文件db.json和已生成的静态文件public。网站显示异常时可以执行这条命令试试。</p><p>hexo g是hexo generate的缩写，命令效果一致。生成网站静态文件到默认设置的public文件夹。便于查看网站生成的静态文件或者手动部署网站；如果使用自动部署，不需要先执行该命令；</p><p>hexo n page aboutme新建一个标题为aboutme的页面，默认链接地址为主页地址/aboutme/标题可以为中文，但一般习惯用英文；页面标题和文章一样可以随意修改；页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</p><p>hexo clean &amp;&amp; hexo shexo clean &amp;&amp; hexo d可以用输入法等软件为这些命令设置快捷键，方便调用。草稿草稿相当于很多博客都有的“私密文章”功能。$ hexo new draft “new draft”会在source/_drafts目录下生成一个new-draft.md文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。如果你希望强行预览草稿，更改配置文件：render_drafts: true或者，如下方式启动server：$ hexo server –drafts下面这条命令可以把草稿变成文章，或者页面：$ hexo publish [layout] <filename></filename></p><p>以上命令使用基于 Hexo 3.1.1 版本；需要删掉用命令新建的文章或页面时，只需要进入 Hexo 根目录下的source文件夹，删除对应文件或文件夹即可；更多命令用法请查询 官方文档。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/04/07/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>微信小游戏的关系链数据</title>
      <link>http://yoursite.com/2018/04/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E5%85%B3%E7%B3%BB%E9%93%BE%E6%95%B0%E6%8D%AE/</link>
      <guid>http://yoursite.com/2018/04/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E5%85%B3%E7%B3%BB%E9%93%BE%E6%95%B0%E6%8D%AE/</guid>
      <pubDate>Fri, 06 Apr 2018 08:55:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;微信用户的关系链数据组成&quot;&gt;&lt;a href=&quot;#微信用户的关系链数据组成&quot; class=&quot;headerlink&quot; title=&quot;微信用户的关系链数据组成&quot;&gt;&lt;/a&gt;微信用户的关系链数据组成&lt;/h3&gt;&lt;p&gt;包括两部分：&lt;/p&gt;
&lt;p&gt; 该用户好友的用户数据&lt;/p&gt;

        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="微信用户的关系链数据组成"><a href="#微信用户的关系链数据组成" class="headerlink" title="微信用户的关系链数据组成"></a>微信用户的关系链数据组成</h3><p>包括两部分：</p><p> 该用户好友的用户数据</p><p> 该用户所在的某个群的群成员的用户数据。</p><p>获取关系链数据的API：</p><p> <a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getFriendCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.getFriendCloudStorage()</a>获取当前用户也玩该小游戏的好友的用户数据</p><p> <a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getGroupCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.getGroupCloudStorage()</a> 获取当前用户在某个群中也玩该小游戏的成员的用户数据</p><p>API返回的结果为一个对象数组，数组的每一个元素都是一个表示用户数据的对象。</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>openId</td><td>string</td><td>用户的openId</td></tr><tr><td>avatarUrI</td><td>string</td><td>用户的微信头像url</td></tr><tr><td>nickName</td><td>string</td><td>用户的微信昵称</td></tr><tr><td>data</td><td>Object</td><td>用户的游戏数据</td></tr></tbody></table><h3 id="关系链数据的应用场景"><a href="#关系链数据的应用场景" class="headerlink" title="关系链数据的应用场景"></a>关系链数据的应用场景</h3><p>例如 用户的段位、战绩、积分等排行榜，这些游戏业务特有的数据，都可以用到这个功能。</p><p>通过调用 <a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.setUserCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.setUserCloudStorage()</a> 可以将当前用户的游戏数据托管在微信后台。只有被托管过数据的用户，才会被视为 <code>玩过</code> 该小游戏的用户，才会出现在 <a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getFriendCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.getFriendCloudStorage()</a> 和 <a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getGroupCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.getGroupCloudStorage()</a>返回的对象数组中。</p><p>除此之外，我们还提供了以下 API：</p><ul><li><a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.removeUserCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.removeUserCloudStorage()</a> 删除用户托管数据中指定字段的数据</li><li><a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getUserCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.getUserCloudStorage()</a> 获取当前用户的托管数据</li></ul><p><a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getUserCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.getUserCloudStorage</a>、<a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getFriendCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.getFriendCloudStorage()</a> 和 <a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.getGroupCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.getGroupCloudStorage()</a> 只能在 <code>开放数据域</code>中调用。<br><a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.setUserCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.setUserCloudStorage()</a> 和 <a href="https://developers.weixin.qq.com/minigame/dev/document/open-api/data/wx.removeUserCloudStorage.html?t=2018329" target="_blank" rel="noopener">wx.removeUserCloudStorage()</a> 可以同时在 <code>主域</code> 和开放数据域中调用。</p><h3 id="展示关系链数据"><a href="#展示关系链数据" class="headerlink" title="展示关系链数据"></a>展示关系链数据</h3><p>如果想要展示通过关系链 API 获取到的用户数据，如绘制排行榜等业务场景，需要将排行榜绘制到 <code>sharedCanvas</code> 上，再在主域将 sharedCanvas 渲染上屏。</p><p><a href="https://developers.weixin.qq.com/minigame/dev/tutorial/images/open-data/data-flow.png" target="_blank" rel="noopener"><img src="https://developers.weixin.qq.com/minigame/dev/tutorial/images/open-data/data-flow.png" alt="img"></a></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/04/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%9A%84%E5%85%B3%E7%B3%BB%E9%93%BE%E6%95%B0%E6%8D%AE/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
